@model System.Data.DataTable
@{
	ViewData["Title"] = "**Vinam PO History";
	if (Context.Request.Headers["x-requested-with"] == "XMLHttpRequest")
	{
		Layout = null;
	}
	else
		Layout = "~/Views/Shared/_Layout.cshtml";

	int PageSize = 20; // Giá trị mặc định
	int CurrentPage = 1; // Trang hiện tại
	int totalItems = Model.Rows.Count; // Tổng số mục có trong Model
	int totalPages = (int)Math.Ceiling((double)totalItems / PageSize); // Tổng số trang

	// Tạo DataTable mới chứa các dòng được phân trang
	System.Data.DataTable paginatedModel = Model.Clone(); // Sao chép cấu trúc của DataTable ban đầu

	// Lấy các dòng tương ứng với trang hiện tại
	int startIndex = (CurrentPage - 1) * PageSize;
	int endIndex = Math.Min(startIndex + PageSize, totalItems);

	for (int i = startIndex; i < endIndex; i++)
	{
		paginatedModel.ImportRow(Model.Rows[i]); // Thêm các dòng vào bảng phân trang
	}
}

<div class="page-wrapper" style="background-color:#ffffff">
	<div class="card">
		@* <form action="~/GeneralReport/ExportVinamPartList" method="post" enctype="multipart/form-data"> *@
		<div class="card-body">
			<div class="row">
				<div class="col-md-6">
					<h4 class="card-title pb-4">**Vinam PO History</h4>
				</div>
				<div class="col-md-6 text-end">
					@* <button type="button" class="btn btn-success btn-lg text-white" id="btnUpdateUsers">Cập nhật</button> *@
					<div id="resultMessage" style="color: green;"></div>
				</div>
			</div>
			<div class="border-top">
				<div class="card-body">
					<h4 class="card-title">Vinam PO History</h4>
					<button class="btn btn-md btn-success text-white invoiceLoc" style="padding-left:2em; padding-right:2em;"
							id="export-button" name="export-button">
						Xuất Excel
					</button>
				</div>
			</div>
			<div class="table-responsive">
				<div class="row">
					<div class="col-sm-6 col-md-3">
						<div class="input-group mb-3">
							<div class="input-group-prepend">
								<span class="input-group-text" id="show">Show</span>
							</div>
							<select id="pageSizeSelect" class="form-select" aria-label="Default select example" aria-describedby="show">
								<option value="20" selected>20</option>
								<option value="50">50</option>
								<option value="100">100</option>
								@* <option value="-1">All</option> *@
							</select>
							<div class="input-group-prepend">
								<span class="input-group-text" id="show">entries</span>
							</div>
						</div>
					</div>
					<div class="col-md-3">
					</div>
					<div class="col-sm-6 col-md-6">
						<div class="input-group mb-3">
							<div class="input-group-prepend">
								<span class="input-group-text" id="basic-addon1">Search</span>
							</div>
							<input type="text" class="form-control" id="searchText" placeholder="Tìm kiếm" aria-label="Search" aria-describedby="basic-addon1">
						</div>
					</div>
				</div>

				<div class="row">
					<nav class="col-12" aria-label="Page navigation example" id="pagination">
						<ul class="pagination">

							@if (CurrentPage > 1)
							{
								<li class="page-item">
									<a class="page-link" href="javascript:void(0)" tabindex="" onclick="changePage(@(CurrentPage - 1))">Previous</a>
								</li>
							}
							else
							{
								<li class="page-item disabled">
									<a class="page-link" href="#">Previous</a>
								</li>
							}

							<!-- Hiển thị trang đầu tiên nếu không nằm trong dãy gần trang hiện tại -->
							@if (CurrentPage > 6)
							{
								<li class="page-item">
									<a class="page-link" href="javascript:void(0)" onclick="setActivePage(1)">1</a>
								</li>
								<li class="page-item disabled">
									<a class="page-link" href="#">...</a>
								</li>
							}

							<!-- Hiển thị 5 trang trước và 5 trang sau trang hiện tại -->
							@for (int i = Math.Max(1, CurrentPage - 5); i <= Math.Min(totalPages, CurrentPage + 5); i++)
							{
								if (i == CurrentPage)
								{
									<li class="page-item active">
										<a class="page-link" href="javascript:void(0)" name=@("currentPage" + i) onclick="setActivePage(@i)">@i</a>
									</li>
								}
								else
								{
									<li class="page-item">
										<a class="page-link" href="javascript:void(0)" name=@("currentPage" + i) onclick="setActivePage(@i)">@i</a>
									</li>
								}
							}

							<!-- Hiển thị trang cuối cùng nếu không nằm trong dãy gần trang hiện tại -->
							@if (CurrentPage < totalPages - 5)
							{
								<li class="page-item disabled">
									<a class="page-link" href="#">...</a>
								</li>
								<li class="page-item">
									<a class="page-link" href="javascript:void(0)" onclick="setActivePage(@totalPages)">@totalPages</a>
								</li>
							}

							<!-- Nút 'Next' -->
							@if (CurrentPage < totalPages)
							{
								<li class="page-item">
									<a class="page-link" href="javascript:void(0)" onclick="setActivePage(@(CurrentPage + 1))">Next</a>
								</li>
							}
							else
							{
								<li class="page-item disabled">
									<a class="page-link" href="#">Next</a>
								</li>
							}
						</ul>
					</nav>
				</div>
				<table id="zero_config" class="table table-striped table-bordered">
					<thead>
						<tr>
							<th>Company</th>
							<th>Open Order</th>
							<th>PO Num</th>
							<th>Req Num</th>
							<th>Req Line</th>
							<th>Vendor ID</th>
							<th>Name</th>
							<th>Entry Person</th>
							<th>Order Date</th>
							<th>PO Line</th>
							<th>Part Num</th>
							<th>Line Desc</th>
							<th>IUM</th>
							<th>PO Comment</th>
							<th>Currency Code</th>
							<th>Exchange Rate</th>
							<th>Approve</th>
							<th>Approval Status</th>
							<th>Open Line</th>
							<th>Ship Via Code</th>
							<th>Terms Code</th>
							<th>Buyer ID</th>
							<th>Unit Cost</th>
							<th>Doc Unit Cost</th>
							<th>Order Qty</th>
							<th>Our Qty</th>
							<th>Receipt Date</th>
							<th>Job Num</th>
							<th>Class ID</th>
							<th>Doc Ext Cost</th>
							<th>Ext Cost</th>
							<th>Total Tax</th>
							<th>Doc Total Tax</th>
							<th>Plant</th>
							<th>Warehouse Code</th>
							<th>PO Rel Num</th>
							<th>Due Date</th>
							<th>Promise Date</th>
							<th>Ship Date</th>
							<th>Est Receipt Date</th>
							<th>Email Address</th>
							<th>Vendor Comment</th>
						</tr>
					</thead>
					@if (paginatedModel != null && paginatedModel.Rows.Count > 0)
					{
						<tbody id="data-body">
							@foreach (System.Data.DataRow inv in paginatedModel.Rows)
							{
								<tr>
									<td>@inv["Company"]</td>
									<td>@inv["OpenOrder"]</td>
									<td>@inv["PONum"]</td>
									<td>@inv["ReqNum"]</td>
									<td>@inv["ReqLine"]</td>
									<td>@inv["VendorID"]</td>
									<td>@inv["Name"]</td>
									<td>@inv["EntryPerson"]</td>
									<td>@inv["OrderDate"]</td>
									<td>@inv["POLine"]</td>
									<td>@inv["PartNum"]</td>
									<td>@inv["LineDesc"]</td>
									<td>@inv["IUM"]</td>
									<td>@inv["CommentText"]</td>
									<td>@inv["CurrencyCode"]</td>
									<td>@inv["ExchangeRate"]</td>
									<td>@inv["Approve"]</td>
									<td>@inv["ApprovalStatus"]</td>
									<td>@inv["OpenLine"]</td>
									<td>@inv["ShipViaCode"]</td>
									<td>@inv["TermsCode"]</td>
									<td>@inv["BuyerID"]</td>
									<td>@inv["UnitCost"]</td>
									<td>@inv["DocUnitCost"]</td>
									<td>@inv["OrderQty"]</td>
									<td>@inv["OurQty"]</td>
									<td>@inv["ReceiptDate"]</td>
									<td>@inv["JobNum"]</td>
									<td>@inv["ClassID"]</td>
									<td>@inv["DocExtCost"]</td>
									<td>@inv["ExtCost"]</td>
									<td>@inv["TotalTax"]</td>
									<td>@inv["DocTotalTax"]</td>
									<td>@inv["Plant"]</td>
									<td>@inv["WarehouseCode"]</td>
									<td>@inv["PORelNum"]</td>
									<td>@inv["DueDate"]</td>
									<td>@inv["PromiseDt"]</td>
									<td>@inv["ShipDate_c"]</td>
									<td>@inv["EstReceiptDate_c"]</td>
									<td>@inv["EMailAddress"]</td>
									<td>@inv["Comment"]</td>
								</tr>
							}
						</tbody>
					}
					else
					{
						<tr>
							<td colspan="40">No records found.</td>
						</tr>
					}
				</table>
			</div>
		</div>
		@* </form> *@
	</div>
</div>
<div id="myModalContainer"></div>
<link rel="stylesheet" type="text/css" href="~/assets/extra-libs/multicheck/multicheck.css">
<link rel="stylesheet" type="text/css" href="~/assets/libs/datatables.net-bs4/css/dataTables.bootstrap4.css">
<link rel="stylesheet" type="text/css" href="~/dist/css/style.min.css">

<!-- form js -->
<!-- this page js -->
<script src="../../assets/extra-libs/multicheck/datatable-checkbox-init.js"></script>
<script src="../../assets/extra-libs/multicheck/jquery.multicheck.js"></script>
<script src="../../assets/extra-libs/DataTables/datatables.min.js"></script>
<link href="~/css/spinner.css" rel="stylesheet" />
<script src="../../dist/js/custom.min.js"></script>
<script>


	// Chuyển dữ liệu từ server vào biến JavaScript
	const data = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));
	console.log(data);
	let currentPage = @CurrentPage;
	let pageSize = @PageSize;
	let textSearch = "";

	document.addEventListener('DOMContentLoaded', function () {
		// Chặn phím Enter cho form có id là 'export-form'
		const form = document.getElementById('export-form');
		form.addEventListener('keydown', function (event) {
			if (event.key === 'Enter') {
				event.preventDefault(); // Ngăn chặn hành động mặc định
				return false;
			}
		});
	});
	function filterData(data, searchText) {
		return data.filter(item => {
			const JobNum = (item.JobNum || "").toLowerCase().includes(searchText.toLowerCase());
			const OpDesc = (item.OpDesc || "").toLowerCase().includes(searchText.toLowerCase());
			const StartDate = (item.StartDate || "").toLowerCase().includes(searchText.toLowerCase());
			const DueDate = (item.DueDate || "").toLowerCase().includes(searchText.toLowerCase());
			const OpCode = (item.OpCode || "").toLowerCase().includes(searchText.toLowerCase());
			// Nếu một trong các cột có chứa giá trị tìm kiếm, trả về true
			return JobNum || OpDesc || StartDate || DueDate || OpCode;
		});
	}

	function renderTable(pageSize, currentPage) {
		const tableBody = document.getElementById('data-body');
		tableBody.innerHTML = ''; // Xóa nội dung hiện tại
		const filteredData = filterData(data, textSearch);
		const paginatedItems = filteredData.slice((currentPage - 1) * pageSize, currentPage * pageSize);
		paginatedItems.forEach(item => {
			tableBody.innerHTML += `
			<tr>
				<td>${item.Company || ''}</td>
				<td>${item.OpenOrder || ''}</td>
				<td>${item.PONum || ''}</td>
				<td>${item.ReqNum || ''}</td>
				<td>${item.ReqLine || ''}</td>
				<td>${item.VendorID || ''}</td>
				<td>${item.Name || ''}</td>
				<td>${item.EntryPerson || ''}</td>
				<td>${item.OrderDate || ''}</td>
				<td>${item.POLine || ''}</td>
				<td>${item.PartNum || ''}</td>
				<td>${item.LineDesc || ''}</td>
				<td>${item.IUM || ''}</td>
				<td>${item.CommentText || ''}</td>
				<td>${item.CurrencyCode || ''}</td>
				<td>${item.ExchangeRate || ''}</td>
				<td>${item.Approve || ''}</td>
				<td>${item.ApprovalStatus || ''}</td>
				<td>${item.OpenLine || ''}</td>
				<td>${item.ShipViaCode || ''}</td>
				<td>${item.TermsCode || ''}</td>
				<td>${item.BuyerID || ''}</td>
				<td>${item.UnitCost || ''}</td>
				<td>${item.DocUnitCost || ''}</td>
				<td>${item.OrderQty || ''}</td>
				<td>${item.OurQty || ''}</td>
				<td>${item.ReceiptDate || ''}</td>
				<td>${item.JobNum || ''}</td>
				<td>${item.ClassID || ''}</td>
				<td>${item.DocExtCost || ''}</td>
				<td>${item.ExtCost || ''}</td>
				<td>${item.TotalTax || ''}</td>
				<td>${item.DocTotalTax || ''}</td>
				<td>${item.Plant || ''}</td>
				<td>${item.WarehouseCode || ''}</td>
				<td>${item.PORelNum || ''}</td>
				<td>${item.DueDate || ''}</td>
				<td>${item.PromiseDt || ''}</td>
				<td>${item.ShipDate_c || ''}</td>
				<td>${item.EstReceiptDate_c || ''}</td>
				<td>${item.EMailAddress || ''}</td>
				<td>${item.Comment || ''}</td>
			</tr>
		`;
		});
	}
	document.getElementById('export-button').addEventListener('click', function () {
		// Gửi dữ liệu bằng Ajax đến controller
		$.ajax({
			url: "/GeneralReport/ExportVinamPOHistory", // Đường dẫn đến action trong controller
			type: "POST",
			// data: {
			// 	fromDate: startDate,
			// 	toDate: endDate
			// },
			xhrFields: {
				responseType: 'blob'
			},
			success: function (data) {
				var blob = new Blob([data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
				// Ẩn hiệu ứng chờ sau khi nhận kết quả từ controller
				$("#loading-spinner").hide();
				// Kích hoạt lại button
				$("#export-button").prop("disabled", false);
				var link = document.createElement('a');
				link.href = window.URL.createObjectURL(blob);
				link.download = 'ExportVinamPOHistory.xlsx'; // Đặt tên file Excel
				link.style.display = 'none';

				document.body.appendChild(link);
				link.click();

				window.URL.revokeObjectURL(link.href);
				document.body.removeChild(link);
			}
		});
	});

	document.getElementById('pageSizeSelect').addEventListener('change', function () {
		pageSize = parseInt(this.value);
		currentPage = 1; // Đặt lại trang hiện tại về 1
		renderTable(pageSize, currentPage); // Gọi lại hàm renderTable
		renderPagging(pageSize, currentPage); // Gọi lại hàm renderTable
	});
	function setActivePage(page) {
		currentPage = page; // Cập nhật trang hiện tại
		renderTable(pageSize, currentPage); // Gọi lại hàm renderTable
		renderPagging(pageSize, currentPage); // Gọi lại hàm renderTable
	}
	let debounceTimeout;

	document.getElementById('searchText').addEventListener('input', function () {
		clearTimeout(debounceTimeout);
		textSearch = this.value;
		debounceTimeout = setTimeout(() => {
			currentPage = 1;
			renderTable(pageSize, currentPage);
			renderPagging(pageSize, currentPage);
		}, 300); // Trì hoãn 300ms trước khi thực hiện tìm kiếm
	});

	// Cập nhật giá trị pageSize khi thay đổi
	document.querySelectorAll('[name^="currentPage"]').forEach(function (element) {
		element.addEventListener('click', function () {
			currentPage = parseInt(this.textContent); // Lấy giá trị của trang từ nội dung
			console.log(currentPage);
			renderTable(pageSize, currentPage); // Gọi lại hàm renderTable
			renderPagging(pageSize, currentPage); // Gọi lại hàm renderTable
		});
	});
	// Gọi hàm renderTable lần đầu để hiển thị dữ liệu ban đầu
	renderTable(pageSize, currentPage);

	function renderPagging(pageSize, currentPage) {

		const filteredData = filterData(data, textSearch);
		const totalItems = filteredData.length;
		const totalPages = Math.ceil(totalItems / pageSize);

		const paginationElement = document.getElementById('pagination');
		paginationElement.innerHTML = ''; // Xóa nội dung hiện tại

		// Dọn dẹp nội dung cũ
		paginationElement.innerHTML = '';

		// Tạo danh sách phân trang
		const ul = document.createElement('ul');
		ul.className = 'pagination';

		// Nút 'Previous'
		const previousLi = document.createElement('li');
		previousLi.className = currentPage > 1 ? 'page-item' : 'page-item disabled';
		const previousLink = document.createElement('a');
		previousLink.className = 'page-link';
		previousLink.href = 'javascript:void(0)';
		previousLink.textContent = 'Previous';
		previousLink.onclick = currentPage > 1 ? () => setActivePage(currentPage - 1) : null;
		previousLi.appendChild(previousLink);
		ul.appendChild(previousLi);

		// Hiển thị trang đầu tiên nếu không nằm trong dãy gần trang hiện tại
		if (currentPage > 6) {
			const firstLi = document.createElement('li');
			firstLi.className = 'page-item';
			const firstLink = document.createElement('a');
			firstLink.className = 'page-link';
			firstLink.href = 'javascript:void(0)';
			firstLink.onclick = () => setActivePage(1);
			firstLink.textContent = '1';
			firstLi.appendChild(firstLink);
			ul.appendChild(firstLi);

			const ellipsisLi = document.createElement('li');
			ellipsisLi.className = 'page-item disabled';
			const ellipsisLink = document.createElement('a');
			ellipsisLink.className = 'page-link';
			ellipsisLink.textContent = '...';
			ellipsisLi.appendChild(ellipsisLink);
			ul.appendChild(ellipsisLi);
		}

		// Hiển thị 5 trang trước và 5 trang sau trang hiện tại
		for (let i = Math.max(1, currentPage - 5); i <= Math.min(totalPages, currentPage + 5); i++) {
			const pageLi = document.createElement('li');
			pageLi.className = i === currentPage ? 'page-item active' : 'page-item';
			const pageLink = document.createElement('a');
			pageLink.className = 'page-link';
			pageLink.href = 'javascript:void(0)';
			pageLink.onclick = () => setActivePage(i);
			pageLink.textContent = i.toString();
			pageLi.appendChild(pageLink);
			ul.appendChild(pageLi);
		}

		if (currentPage < totalPages - 5) {
			const ellipsisLi = document.createElement('li');
			ellipsisLi.className = 'page-item disabled';
			const ellipsisLink = document.createElement('a');
			ellipsisLink.className = 'page-link';
			ellipsisLink.textContent = '...';
			ellipsisLi.appendChild(ellipsisLink);
			ul.appendChild(ellipsisLi);

			const lastLi = document.createElement('li');
			lastLi.className = 'page-item';
			const lastLink = document.createElement('a');
			lastLink.className = 'page-link';
			lastLink.href = 'javascript:void(0)';
			lastLink.onclick = () => setActivePage(totalPages);
			lastLink.textContent = totalPages.toString();
			lastLi.appendChild(lastLink);
			ul.appendChild(lastLi);
		}

		const nextLi = document.createElement('li');
		nextLi.className = currentPage < totalPages ? 'page-item' : 'page-item disabled';
		const nextLink = document.createElement('a');
		nextLink.className = 'page-link';
		nextLink.href = 'javascript:void(0)';
		nextLink.textContent = 'Next';
		nextLink.onclick = currentPage < totalPages ? () => setActivePage(currentPage + 1) : null;
		nextLi.appendChild(nextLink);
		ul.appendChild(nextLi);

		paginationElement.appendChild(ul);
	}
	var table = $('#zero_config').DataTable({
		paging: false, // Enable paging
		searching: false, // Disable search
		lengthChange: true, // Disable length change
		ordering: true, // Disable automatic ordering
		responsive: true,
		language: {
			info: "",
		}
	});
</script>

@section css {
	<link rel="stylesheet" type="text/css" href="~/assets/extra-libs/multicheck/multicheck.css">
	<link rel="stylesheet" type="text/css" href="~/assets/libs/datatables.net-bs4/css/dataTables.bootstrap4.css">
	<link rel="stylesheet" type="text/css" href="~/dist/css/style.min.css">
}


@section script {
	<!-- form js -->
	<!-- this page js -->
	<script src="../../assets/extra-libs/multicheck/datatable-checkbox-init.js"></script>
	<script src="../../assets/extra-libs/multicheck/jquery.multicheck.js"></script>
	<script src="../../assets/extra-libs/DataTables/datatables.min.js"></script>
	<link href="~/css/spinner.css" rel="stylesheet" />
	<script src="../../dist/js/custom.min.js"></script>

	<script>
		var table = $('#zero_config').DataTable({
			paging: false, // Enable paging
			searching: false, // Disable search
			lengthChange: true, // Disable length change
			ordering: true, // Disable automatic ordering
			responsive: true,
			language: {
				info: "",
			}
		});
		document.getElementById('export-button').addEventListener('click', function () {
			// Gửi dữ liệu bằng Ajax đến controller
			$.ajax({
				url: "/GeneralReport/ExportVinamPOHistory", // Đường dẫn đến action trong controller
				type: "POST",
				// data: {
				// 	fromDate: startDate,
				// 	toDate: endDate
				// },
				xhrFields: {
					responseType: 'blob'
				},
				success: function (data) {
					var blob = new Blob([data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
					// Ẩn hiệu ứng chờ sau khi nhận kết quả từ controller
					$("#loading-spinner").hide();
					// Kích hoạt lại button
					$("#export-button").prop("disabled", false);
					var link = document.createElement('a');
					link.href = window.URL.createObjectURL(blob);
					link.download = 'ExportVinamPOHistory.xlsx'; // Đặt tên file Excel
					link.style.display = 'none';

					document.body.appendChild(link);
					link.click();

					window.URL.revokeObjectURL(link.href);
					document.body.removeChild(link);
				}
			});
		});

		// $(document).ready(function () {
		// 	$("form").submit(function (e) {
		// 		e.preventDefault(); // Ngăn chặn form gửi dữ liệu một cách thông thường

		// 		// Hiển thị hiệu ứng chờ
		// 		$("#loading-spinner").show();
		// 		// Vô hiệu hóa button
		// 		$("#export-button").prop("disabled", true);

		// 		// Gửi dữ liệu bằng Ajax đến controller
		// 		$.ajax({
		// 			url: "/GeneralReport/ExportVinamJobTracker", // Đường dẫn đến action trong controller
		// 			type: "POST",
		// 			// data: {
		// 			// 	fromDate: startDate,
		// 			// 	toDate: endDate
		// 			// },
		// 			xhrFields: {
		// 				responseType: 'blob'
		// 			},
		// 			success: function (data) {
		// 				var blob = new Blob([data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
		// 				// Ẩn hiệu ứng chờ sau khi nhận kết quả từ controller
		// 				$("#loading-spinner").hide();
		// 				// Kích hoạt lại button
		// 				$("#export-button").prop("disabled", false);
		// 				var link = document.createElement('a');
		// 				link.href = window.URL.createObjectURL(blob);
		// 				link.download = 'ExportVinamJobTracker.xlsx'; // Đặt tên file Excel
		// 				link.style.display = 'none';

		// 				document.body.appendChild(link);
		// 				link.click();

		// 				window.URL.revokeObjectURL(link.href);
		// 				document.body.removeChild(link);
		// 			}
		// 		});
		// 	});
		// });
		document.addEventListener('DOMContentLoaded', function () {
			// Chặn phím Enter cho form có id là 'export-form'
			const form = document.getElementById('export-form');
			form.addEventListener('keydown', function (event) {
				if (event.key === 'Enter') {
					event.preventDefault(); // Ngăn chặn hành động mặc định
					return false;
				}
			});
		});
	</script>
}