@model System.Data.DataTable

@{

	ViewData["Title"] = "**Vinam Sales Invoice List";
	if (Context.Request.Headers["x-requested-with"] == "XMLHttpRequest")
	{
		Layout = null;
	}
	else
		Layout = "~/Views/Shared/_Layout.cshtml";
	// Tính ngày đầu tuần (Thứ Hai) và cuối tuần (Chủ Nhật)
	var today = DateTime.Today;
	var startOfWeek = today.AddDays(-(int)today.DayOfWeek + (int)DayOfWeek.Monday); // Thứ Hai
	var endOfWeek = startOfWeek.AddDays(6); // Chủ Nhật
	var dataListJson = Newtonsoft.Json.JsonConvert.SerializeObject(Model);
	int PageSize = 20; // Giá trị mặc định
	int CurrentPage = 1; // Trang hiện tại
	int totalItems = Model.Rows.Count; // Tổng số mục có trong Model
	int totalPages = (int)Math.Ceiling((double)totalItems / PageSize); // Tổng số trang

	// Tạo DataTable mới chứa các dòng được phân trang
	System.Data.DataTable paginatedModel = Model.Clone(); // Sao chép cấu trúc của DataTable ban đầu

	// Lấy các dòng tương ứng với trang hiện tại
	int startIndex = (CurrentPage - 1) * PageSize;
	int endIndex = Math.Min(startIndex + PageSize, totalItems);

	for (int i = startIndex; i 
	< endIndex; i++)
	{
		paginatedModel.ImportRow(Model.Rows[i]); // Thêm các dòng vào bảng phân trang
	}
}
<div class="page-wrapper" style="background-color:#ffffff">
	<div class="card">
		@* <form action="~/GeneralReport/ExportVinamPartList" method="post" enctype="multipart/form-data"> *@
		<div class="card-body">
			<div class="row">
				<div class="col-md-6">
					<h4 class="card-title pb-4">**Vinam Sales Invoice List</h4>
				</div>
				<div class="col-md-6 text-end">
					@* <button type="button" class="btn btn-success btn-lg text-white" id="btnUpdateUsers">Cập nhật</button> *@
					<div id="resultMessage" style="color: green;"></div>
				</div>
			</div>
			<div class="border-top">
				<div class="card-body">
					<h4 class="card-title">Vinam Sales Invoice List</h4>
					<button class="btn btn-md btn-success text-white invoiceLoc" style="padding-left:2em; padding-right:2em;"
							id="export-button" name="export-button">
						Xuất Excel
					</button>
					@* <div class="row">
					<div class="col-6">
					<label class="mt-3">From Date</label>
					<div class="input-group">
					<input type="text" class="form-control datepicker-autoclose" id="fromDate" name="fromDate"
					placeholder="mm/dd/yyyy" value="@startOfWeek.ToString("MM/dd/yyyy")" autocomplete="off">
					<div class="input-group-append">
					<span class="input-group-text h-100"><i class="fa fa-calendar"></i></span>
					</div>
					</div>
					</div>
					<div class="col-6">
					<label class="mt-3">To Date</label>
					<div class="input-group">
					<input type="text" class="form-control datepicker-autoclose" id="toDate" name="toDate"
					placeholder="mm/dd/yyyy" value="@endOfWeek.ToString("MM/dd/yyyy")" autocomplete="off">
					<div class="input-group-append">
					<span class="input-group-text h-100"><i class="fa fa-calendar"></i></span>
					</div>
					</div>
					</div>
					</div> *@


				</div>
			</div>
			<div class="table-responsive">
				<div class="row">
					<div class="col-sm-6 col-md-3">
						<div class="input-group mb-3">
							<div class="input-group-prepend">
								<span class="input-group-text" id="show">Show</span>
							</div>
							<select id="pageSizeSelect" class="form-select" aria-label="Default select example" aria-describedby="show">
								<option value="20" selected>20</option>
								<option value="50">50</option>
								<option value="100">100</option>
								@* <option value="-1">All</option> *@
							</select>
							<div class="input-group-prepend">
								<span class="input-group-text" id="show">entries</span>
							</div>
						</div>
					</div>
					<div class="col-md-3">
					</div>
					<div class="col-sm-6 col-md-6">
						<div class="input-group mb-3">
							<div class="input-group-prepend">
								<span class="input-group-text" id="basic-addon1">Search</span>
							</div>
							<input type="text" class="form-control" id="searchText" placeholder="Tìm kiếm" aria-label="Search" aria-describedby="basic-addon1">
						</div>
					</div>
				</div>


				<div class="row">
					<nav class="col-12" aria-label="Page navigation example" id="pagination">
						<ul class="pagination">

							@if (CurrentPage > 1)
							{
								<li class="page-item">
									<a class="page-link" href="javascript:void(0)" tabindex="" onclick="changePage(@(CurrentPage - 1))">Previous</a>
								</li>
							}
							else
							{
								<li class="page-item disabled">
									<a class="page-link" href="#">Previous</a>
								</li>
							}

							<!-- Hiển thị trang đầu tiên nếu không nằm trong dãy gần trang hiện tại -->
							@if (CurrentPage > 6)
							{
								<li class="page-item">
									<a class="page-link" href="javascript:void(0)" onclick="setActivePage(1)">1</a>
								</li>
								<li class="page-item disabled">
									<a class="page-link" href="#">...</a>
								</li>
							}

							<!-- Hiển thị 5 trang trước và 5 trang sau trang hiện tại -->
							@for (int i = Math.Max(1, CurrentPage - 5); i <= Math.Min(totalPages, CurrentPage + 5); i++)
							{
								if (i == CurrentPage)
								{
									<li class="page-item active">
										<a class="page-link" href="javascript:void(0)" name=@("currentPage" + i) onclick="setActivePage(@i)">@i</a>
									</li>
								}
								else
								{
									<li class="page-item">
										<a class="page-link" href="javascript:void(0)" name=@("currentPage" + i) onclick="setActivePage(@i)">@i</a>
									</li>
								}
							}

							<!-- Hiển thị trang cuối cùng nếu không nằm trong dãy gần trang hiện tại -->
							@if (CurrentPage < totalPages - 5)
							{
								<li class="page-item disabled">
									<a class="page-link" href="#">...</a>
								</li>
								<li class="page-item">
									<a class="page-link" href="javascript:void(0)" onclick="setActivePage(@totalPages)">@totalPages</a>
								</li>
							}

							<!-- Nút 'Next' -->
							@if (CurrentPage < totalPages)
							{
								<li class="page-item">
									<a class="page-link" href="javascript:void(0)" onclick="setActivePage(@(CurrentPage + 1))">Next</a>
								</li>
							}
							else
							{
								<li class="page-item disabled">
									<a class="page-link" href="#">Next</a>
								</li>
							}
						</ul>
					</nav>
				</div>
				<table id="zero_config" class="table table-striped table-bordered">
					<thead>
						<tr>
							<th>Company Name</th>
							<th>Company Tax Registration</th>
							<th>Currency</th>
							<th>Invoice Type</th>
							<th>Report Date</th>
							<th>Invoice No</th>
							<th>Invoice Date</th>
							<th>Company</th>
							<th>Invoice</th>
							<th>Legal Number</th>
							<th>Customer Name</th>
							<th>Customer Tax Registration</th>
							<th>Sales Amount</th>
							<th>Amount Tax</th>
							<th>Note</th>
							<th>Sales Doc Amount</th>
							<th>Doc Amount Tax</th>
							<th>Customer Currency</th>
							<th>Document Type</th>
							<th>Customer Declaration No</th>
						</tr>
					</thead>
					@if (paginatedModel != null && paginatedModel.Rows.Count > 0)
					{
						<tbody id="data-body">
							@foreach (System.Data.DataRow inv in paginatedModel.Rows)
							{
								<tr>
									<td>@inv["CompanyName"]</td>
									<td>@inv["CompanyTaxRegistation"]</td>
									<td>@inv["Currency"]</td>
									<td>@inv["InvoiceType"]</td>
									<td>
										@(inv["ReportDate"] != DBNull.Value && inv["ReportDate"] is DateTime reportDate
																	? reportDate.ToString("dd-MM-yyyy")
																	: "")
									</td>
									<td>@inv["InvoiceNo"]</td>
									<td>
										@(inv["InvoiceDate"] != DBNull.Value && inv["InvoiceDate"] is DateTime invoiceDate
																	? invoiceDate.ToString("dd-MM-yyyy")
																	: "")
									</td>
									<td>@inv["Company"]</td>
									<td>@inv["Invoice"]</td>
									<td>@inv["LegalNumber"]</td>
									<td>@inv["CustomerName"]</td>
									<td>@inv["CustomerTaxRegistration"]</td>
									<td>@inv["SalesAmount"]</td>
									<td>@inv["AmountTax"]</td>
									<td>@inv["Note"]</td>
									<td>@inv["SalesDocAmount"]</td>
									<td>@inv["DocAmountTax"]</td>
									<td>@inv["CustCurrency"]</td>
									<td>@inv["DocumentType"]</td>
									<td>@inv["CustomerDeclarationNo"]</td>
								</tr>
							}
						</tbody>
					}
					else
					{
						<tr>
							<td colspan="20">No records found.</td>
						</tr>
					}

				</table>
			</div>
		</div>
		@* </form> *@
	</div>
</div>
<div id="myModalContainer"></div>

<!-- Hiệu ứng chờ -->
<div id="loading-spinner">
	<div class="spinner"></div>
</div>
<link rel="stylesheet" href="~/assets/libs/bootstrap-datepicker/dist/css/bootstrap-datepicker.min.css">
<link rel="stylesheet" href="~/assets/libs/quill/dist/quill.snow.css">
<link rel="stylesheet" href="~/assets/libs/select2/dist/css/select2.min.css">
<link rel="stylesheet" href="~/assets/libs/jquery-minicolors/jquery.minicolors.css">

<link href="~/assets/libs/datatables/media/css/jquery.datatables.min.css" rel="stylesheet" />
<script src="~/assets/libs/bootstrap-datepicker/dist/js/bootstrap-datepicker.min.js"></script>
<script src="~/assets/libs/datatables/media/js/jquery.datatables.min.js"></script>

<script>

	// Chuyển dữ liệu từ server vào biến JavaScript
	var dataJson = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model))
		let currentPage = @CurrentPage;
	let pageSize = @PageSize;
	let textSearch = "";
	let debounceTimeout;

	// jQuery('.datepicker-autoclose').datepicker({
	// 	autoclose: true,
	// 	todayHighlight: true,
	// 	orientation: 'bottom'
	// });

	function filterData(data, searchText) {
		return data.filter(item => {
			const InvoiceNo = (item.InvoiceNo || "").toString().toLowerCase().includes(searchText.toLowerCase());
			const LegalNumber = (item.LegalNumber || "").toString().toLowerCase().includes(searchText.toLowerCase());
			const Invoice = (item.Invoice || "").toString().toLowerCase().includes(searchText.toLowerCase());
			const Note = (item.Note || "").toString().toLowerCase().includes(searchText.toLowerCase());
			// Nếu một trong các cột có chứa giá trị tìm kiếm, trả về true
			return InvoiceNo || LegalNumber || Invoice || Note;
		});
	}

	function renderTable(pageSize, currentPage) {
		const tableBody = document.getElementById('data-body');
		tableBody.innerHTML = ''; // Xóa nội dung hiện tại
		const filteredData = filterData(dataJson, textSearch);
		const paginatedItems = filteredData.slice((currentPage - 1) * pageSize, currentPage * pageSize);
		paginatedItems.forEach(item => {
			tableBody.innerHTML += `
				<tr>
					<td>${item.CompanyName || ''}</td>
					<td>${item.CompanyTaxRegistation || ''}</td>
					<td>VND</td>
					<td>${item.InvoiceType || ''}</td>
					<td>${formatDate(item.ReportDate) || ''}</td>
					<td>${item.InvoiceNo || ''}</td>
					<td>${formatDate(item.InvoiceDate) || ''}</td>
					<td>${item.Company || ''}</td>
					<td>${item.Invoice || ''}</td>
					<td>${item.LegalNumber || ''}</td>
					<td>${item.CustomerName || ''}</td>
					<td>${item.CustomerTaxRegistration || ''}</td>
					<td>${item.SalesAmount || ''}</td>
					<td>${item.AmountTax || ''}</td>
					<td>${item.Note || ''}</td>
					<td>${item.SalesDocAmount || ''}</td>
					<td>${item.DocAmountTax || ''}</td>
					<td>${item.CustCurrency || ''}</td>
					<td>${item.DocumentType || ''}</td>
					<td>${item.CustomerDeclarationNo || ''}</td>
				</tr>
								`;
		});
	}

	function formatDate(dateString, formatTime = false) {
		if (!dateString) {
			return ''; // Nếu không có ngày, trả về chuỗi rỗng
		}

		// Chuyển đổi chuỗi thành đối tượng Date
		const date = new Date(dateString);

		// Kiểm tra nếu dateString không hợp lệ
		if (isNaN(date)) {
			return ''; // Trả về chuỗi rỗng nếu không hợp lệ
		}

		// Lấy các giá trị ngày, tháng, năm, giờ, phút, giây
		const day = String(date.getDate()).padStart(2, '0');
		const month = String(date.getMonth() + 1).padStart(2, '0'); // Tháng tính từ 0 nên cần +1
		const year = date.getFullYear();
		const hours = String(date.getHours()).padStart(2, '0');
		const minutes = String(date.getMinutes()).padStart(2, '0');
		const seconds = String(date.getSeconds()).padStart(2, '0');
		if (formatTime == true)
			return `${day}-${month}-${year} ${hours}:${minutes}:${seconds}`
		else return `${day}-${month}-${year}`;
		// Trả về chuỗi định dạng dd-mm-yyyy hh:mm:ss
		// return `${day}-${month}-${year} ${hours}:${minutes}:${seconds}`;
	}

	function setActivePage(page) {
		currentPage = page; // Cập nhật trang hiện tại
		renderTable(pageSize, currentPage); // Gọi lại hàm renderTable
		renderPagging(pageSize, currentPage); // Gọi lại hàm renderTable
	}

	// Gọi hàm renderTable lần đầu để hiển thị dữ liệu ban đầu
	renderTable(pageSize, currentPage);

	function renderPagging(pageSize, currentPage) {

		const filteredData = filterData(dataJson, textSearch);
		const totalItems = filteredData.length;
		const totalPages = Math.ceil(totalItems / pageSize);

		const paginationElement = document.getElementById('pagination');
		paginationElement.innerHTML = ''; // Xóa nội dung hiện tại

		// Dọn dẹp nội dung cũ
		paginationElement.innerHTML = '';

		// Tạo danh sách phân trang
		const ul = document.createElement('ul');
		ul.className = 'pagination';

		// Nút 'Previous'
		const previousLi = document.createElement('li');
		previousLi.className = currentPage > 1 ? 'page-item' : 'page-item disabled';
		const previousLink = document.createElement('a');
		previousLink.className = 'page-link';
		previousLink.href = 'javascript:void(0)';
		previousLink.textContent = 'Previous';
		previousLink.onclick = currentPage > 1 ? () => setActivePage(currentPage - 1) : null;
		previousLi.appendChild(previousLink);
		ul.appendChild(previousLi);

		// Hiển thị trang đầu tiên nếu không nằm trong dãy gần trang hiện tại
		if (currentPage > 6) {
			const firstLi = document.createElement('li');
			firstLi.className = 'page-item';
			const firstLink = document.createElement('a');
			firstLink.className = 'page-link';
			firstLink.href = 'javascript:void(0)';
			firstLink.onclick = () => setActivePage(1);
			firstLink.textContent = '1';
			firstLi.appendChild(firstLink);
			ul.appendChild(firstLi);

			const ellipsisLi = document.createElement('li');
			ellipsisLi.className = 'page-item disabled';
			const ellipsisLink = document.createElement('a');
			ellipsisLink.className = 'page-link';
			ellipsisLink.textContent = '...';
			ellipsisLi.appendChild(ellipsisLink);
			ul.appendChild(ellipsisLi);
		}

		// Hiển thị 5 trang trước và 5 trang sau trang hiện tại
		for (let i = Math.max(1, currentPage - 5); i <= Math.min(totalPages, currentPage + 5); i++) {
			const pageLi = document.createElement('li');
			pageLi.className = i === currentPage ? 'page-item active' : 'page-item';
			const pageLink = document.createElement('a');
			pageLink.className = 'page-link';
			pageLink.href = 'javascript:void(0)';
			pageLink.onclick = () => setActivePage(i);
			pageLink.textContent = i.toString();
			pageLi.appendChild(pageLink);
			ul.appendChild(pageLi);
		}

		if (currentPage < totalPages - 5) {
			const ellipsisLi = document.createElement('li');
			ellipsisLi.className = 'page-item disabled';
			const ellipsisLink = document.createElement('a');
			ellipsisLink.className = 'page-link';
			ellipsisLink.textContent = '...';
			ellipsisLi.appendChild(ellipsisLink);
			ul.appendChild(ellipsisLi);

			const lastLi = document.createElement('li');
			lastLi.className = 'page-item';
			const lastLink = document.createElement('a');
			lastLink.className = 'page-link';
			lastLink.href = 'javascript:void(0)';
			lastLink.onclick = () => setActivePage(totalPages);
			lastLink.textContent = totalPages.toString();
			lastLi.appendChild(lastLink);
			ul.appendChild(lastLi);
		}

		const nextLi = document.createElement('li');
		nextLi.className = currentPage < totalPages ? 'page-item' : 'page-item disabled';
		const nextLink = document.createElement('a');
		nextLink.className = 'page-link';
		nextLink.href = 'javascript:void(0)';
		nextLink.textContent = 'Next';
		nextLink.onclick = currentPage < totalPages ? () => setActivePage(currentPage + 1) : null;
		nextLi.appendChild(nextLink);
		ul.appendChild(nextLi);

		paginationElement.appendChild(ul);
	}


</script>

<script>
	// Tạo hàm dùng chung để xử lý sự kiện change cho cả fromDate và toDate
	function handleDateChange() {
		var startDate = $("#fromDate").val();
		var endDate = $("#toDate").val();

		// Kiểm tra xem startDate và endDate đã được chọn hay chưa
		if (!startDate || !endDate) {
			alert("Vui lòng chọn cả ngày bắt đầu và ngày kết thúc.");
			return; // Dừng xử lý nếu không chọn đủ hai ngày
		}
		$("#loading-spinner").show();

		// Gửi dữ liệu bằng Ajax đến controller
		$.ajax({
			url: "/GeneralReport/VinamSalesInvoiceList", // Đường dẫn đến action trong controller
			type: "GET",
			data: {
				fromDate: startDate,
				toDate: endDate
			},
			success: function (result) {
				$("#loading-spinner").hide();

				dataJson = JSON.parse(result);
				currentPage = 1; // Đặt lại trang hiện tại về 1
				renderTable(pageSize, currentPage); // Gọi lại hàm renderTable
				renderPagging(pageSize, currentPage); // Gọi lại hàm renderTable
			},
			error: function (error) {
				console.error("Đã xảy ra lỗi khi gửi yêu cầu:", error);
			}
		});
	}
	// Sử dụng sự kiện changeDate của bootstrap-datepicker
	$('#fromDate').datepicker().on('changeDate', handleDateChange);
	$('#toDate').datepicker().on('changeDate', handleDateChange);

</script>

<script>
	document.getElementById('export-button').addEventListener('click', function () {

		var startDate = $("#fromDate").val();
		var endDate = $("#toDate").val();

		// Kiểm tra xem startDate và endDate đã được chọn hay chưa
		if (!startDate || !endDate) {
			alert("Vui lòng chọn cả ngày bắt đầu và ngày kết thúc.");
			return; // Dừng xử lý nếu không chọn đủ hai ngày
		}

		$("#loading-spinner").show();
		// Gửi dữ liệu bằng Ajax đến controller
		$.ajax({
			url: "/GeneralReport/ExportVinamSalesInvoiceList", // Đường dẫn đến action trong controller
			type: "POST",
			data: {
				fromDate: startDate,
				toDate: endDate
			},
			xhrFields: {
				responseType: 'blob'
			},
			success: function (data) {
				var blob = new Blob([data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
				// Ẩn hiệu ứng chờ sau khi nhận kết quả từ controller
				$("#loading-spinner").hide();
				// Kích hoạt lại button
				$("#export-button").prop("disabled", false);
				var link = document.createElement('a');
				link.href = window.URL.createObjectURL(blob);
				link.download = 'ExportVinamSalesInvoiceList.xlsx'; // Đặt tên file Excel
				link.style.display = 'none';

				document.body.appendChild(link);
				link.click();

				window.URL.revokeObjectURL(link.href);
				document.body.removeChild(link);
			}
		});
	});
</script>

<script>

	document.getElementById('pageSizeSelect').addEventListener('change', function () {
		pageSize = parseInt(this.value);
		currentPage = 1; // Đặt lại trang hiện tại về 1
		renderTable(pageSize, currentPage); // Gọi lại hàm renderTable
		renderPagging(pageSize, currentPage); // Gọi lại hàm renderTable
	});
</script>


<script>

	var table = $('#zero_config').DataTable({
		paging: false, // Enable paging
		searching: false, // Disable search
		lengthChange: true, // Disable length change
		ordering: true, // Disable automatic ordering
		// responsive: true,
		language: {
			info: "",
		}
	});
</script>


<script>

	// Cập nhật giá trị pageSize khi thay đổi
	document.querySelectorAll('[name^="currentPage"]').forEach(function (element) {
		element.addEventListener('click', function () {
			currentPage = parseInt(this.textContent); // Lấy giá trị của trang từ nội dung
			renderTable(pageSize, currentPage); // Gọi lại hàm renderTable
			renderPagging(pageSize, currentPage); // Gọi lại hàm renderTable
		});
	});
</script>


<script>

	document.getElementById('searchText').addEventListener('input', function () {
		clearTimeout(debounceTimeout);
		textSearch = this.value;
		debounceTimeout = setTimeout(() => {
			currentPage = 1;
			renderTable(pageSize, currentPage);
			renderPagging(pageSize, currentPage);
		}, 300); // Trì hoãn 300ms trước khi thực hiện tìm kiếm
	});
</script>


<script>

</script>


<script>

</script>




@section script {

	<link rel="stylesheet" type="text/css" href="~/assets/libs/bootstrap-datepicker/dist/css/bootstrap-datepicker.min.css">
	<link rel="stylesheet" type="text/css" href="~/assets/libs/quill/dist/quill.snow.css">
	<link rel="stylesheet" type="text/css" href="~/assets/libs/select2/dist/css/select2.min.css">
	<link rel="stylesheet" type="text/css" href="~/assets/libs/jquery-minicolors/jquery.minicolors.css">
	<link href="~/assets/libs/datatables/media/css/jquery.datatables.min.css" rel="stylesheet" />
	<script src="~/assets/libs/bootstrap-datepicker/dist/js/bootstrap-datepicker.min.js"></script>
	<script src="~/assets/libs/datatables/media/js/jquery.datatables.min.js"></script>

	<script>
		// /*datwpicker*/
		// jQuery('.datepicker-autoclose').datepicker({
		// 	autoclose: true,
		// 	todayHighlight: true,
		// 	orientation: 'bottom'
		// });


		// Tạo hàm dùng chung để xử lý sự kiện change cho cả fromDate và toDate
		function handleDateChange() {
			var startDate = $("#fromDate").val();
			var endDate = $("#toDate").val();

			// Kiểm tra xem startDate và endDate đã được chọn hay chưa
			if (!startDate || !endDate) {
				alert("Vui lòng chọn cả ngày bắt đầu và ngày kết thúc.");
				return; // Dừng xử lý nếu không chọn đủ hai ngày
			}
			$("#loading-spinner").show();

			// Gửi dữ liệu bằng Ajax đến controller
			$.ajax({
				url: "/GeneralReport/VinamSalesInvoiceList", // Đường dẫn đến action trong controller
				type: "GET",
				data: {
					fromDate: startDate,
					toDate: endDate
				},
				success: function (result) {
					$("#loading-spinner").hide();
					dataJson = JSON.parse(result);
					currentPage = 1; // Đặt lại trang hiện tại về 1
					renderTable(pageSize, currentPage); // Gọi lại hàm renderTable
					renderPagging(pageSize, currentPage); // Gọi lại hàm renderTable
				},
				error: function (error) {
					console.error("Đã xảy ra lỗi khi gửi yêu cầu:", error);
				}
			});
		}
		// Sử dụng sự kiện changeDate của bootstrap-datepicker
		$('#fromDate').datepicker().on('changeDate', handleDateChange);
		$('#toDate').datepicker().on('changeDate', handleDateChange);


		document.getElementById('export-button').addEventListener('click', function () {
			var startDate = $("#fromDate").val();
			var endDate = $("#toDate").val();

			// Kiểm tra xem startDate và endDate đã được chọn hay chưa
			if (!startDate || !endDate) {
				alert("Vui lòng chọn cả ngày bắt đầu và ngày kết thúc.");
				return; // Dừng xử lý nếu không chọn đủ hai ngày
			}

			// Gửi dữ liệu bằng Ajax đến controller
			$.ajax({
				url: "/GeneralReport/ExportVinamSalesInvoiceList", // Đường dẫn đến action trong controller
				type: "POST",
				data: {
					fromDate: startDate,
					toDate: endDate
				},
				xhrFields: {
					responseType: 'blob'
				},
				success: function (data) {
					var blob = new Blob([data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
					// Ẩn hiệu ứng chờ sau khi nhận kết quả từ controller
					$("#loading-spinner").hide();
					// Kích hoạt lại button
					$("#export-button").prop("disabled", false);
					var link = document.createElement('a');
					link.href = window.URL.createObjectURL(blob);
					link.download = 'ExportVinamSalesInvoiceList.xlsx'; // Đặt tên file Excel
					link.style.display = 'none';

					document.body.appendChild(link);
					link.click();

					window.URL.revokeObjectURL(link.href);
					document.body.removeChild(link);
				}
			});
		});


		var table = $('#zero_config').DataTable({
			paging: false, // Enable paging
			searching: false, // Disable search
			lengthChange: true, // Disable length change
			ordering: true, // Disable automatic ordering
			// responsive: true,
			language: {
				info: "",
			}
		});


	</script>
}